/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 155.0, "minX": 0.0, "maxY": 1295446.0, "series": [{"data": [[0.0, 155.0], [0.1, 413.0], [0.2, 415.0], [0.3, 416.0], [0.4, 417.0], [0.5, 418.0], [0.6, 419.0], [0.7, 420.0], [0.8, 420.0], [0.9, 421.0], [1.0, 421.0], [1.1, 422.0], [1.2, 423.0], [1.3, 423.0], [1.4, 423.0], [1.5, 424.0], [1.6, 424.0], [1.7, 425.0], [1.8, 425.0], [1.9, 425.0], [2.0, 426.0], [2.1, 426.0], [2.2, 427.0], [2.3, 427.0], [2.4, 427.0], [2.5, 428.0], [2.6, 428.0], [2.7, 428.0], [2.8, 429.0], [2.9, 429.0], [3.0, 429.0], [3.1, 430.0], [3.2, 430.0], [3.3, 430.0], [3.4, 431.0], [3.5, 431.0], [3.6, 431.0], [3.7, 431.0], [3.8, 432.0], [3.9, 432.0], [4.0, 432.0], [4.1, 433.0], [4.2, 433.0], [4.3, 433.0], [4.4, 434.0], [4.5, 434.0], [4.6, 434.0], [4.7, 434.0], [4.8, 435.0], [4.9, 435.0], [5.0, 435.0], [5.1, 436.0], [5.2, 436.0], [5.3, 436.0], [5.4, 436.0], [5.5, 437.0], [5.6, 437.0], [5.7, 437.0], [5.8, 438.0], [5.9, 438.0], [6.0, 438.0], [6.1, 439.0], [6.2, 439.0], [6.3, 439.0], [6.4, 439.0], [6.5, 440.0], [6.6, 440.0], [6.7, 440.0], [6.8, 441.0], [6.9, 441.0], [7.0, 441.0], [7.1, 442.0], [7.2, 442.0], [7.3, 442.0], [7.4, 443.0], [7.5, 443.0], [7.6, 443.0], [7.7, 444.0], [7.8, 444.0], [7.9, 445.0], [8.0, 445.0], [8.1, 445.0], [8.2, 446.0], [8.3, 446.0], [8.4, 446.0], [8.5, 447.0], [8.6, 447.0], [8.7, 448.0], [8.8, 448.0], [8.9, 448.0], [9.0, 449.0], [9.1, 449.0], [9.2, 450.0], [9.3, 450.0], [9.4, 451.0], [9.5, 451.0], [9.6, 451.0], [9.7, 452.0], [9.8, 452.0], [9.9, 453.0], [10.0, 453.0], [10.1, 454.0], [10.2, 454.0], [10.3, 455.0], [10.4, 455.0], [10.5, 456.0], [10.6, 456.0], [10.7, 457.0], [10.8, 457.0], [10.9, 458.0], [11.0, 458.0], [11.1, 459.0], [11.2, 459.0], [11.3, 460.0], [11.4, 460.0], [11.5, 461.0], [11.6, 461.0], [11.7, 462.0], [11.8, 462.0], [11.9, 463.0], [12.0, 463.0], [12.1, 464.0], [12.2, 464.0], [12.3, 465.0], [12.4, 465.0], [12.5, 466.0], [12.6, 466.0], [12.7, 467.0], [12.8, 467.0], [12.9, 468.0], [13.0, 468.0], [13.1, 469.0], [13.2, 469.0], [13.3, 470.0], [13.4, 470.0], [13.5, 471.0], [13.6, 471.0], [13.7, 472.0], [13.8, 472.0], [13.9, 473.0], [14.0, 473.0], [14.1, 474.0], [14.2, 474.0], [14.3, 475.0], [14.4, 475.0], [14.5, 476.0], [14.6, 476.0], [14.7, 477.0], [14.8, 477.0], [14.9, 477.0], [15.0, 478.0], [15.1, 478.0], [15.2, 479.0], [15.3, 479.0], [15.4, 480.0], [15.5, 480.0], [15.6, 481.0], [15.7, 481.0], [15.8, 482.0], [15.9, 482.0], [16.0, 483.0], [16.1, 483.0], [16.2, 484.0], [16.3, 484.0], [16.4, 484.0], [16.5, 485.0], [16.6, 485.0], [16.7, 486.0], [16.8, 486.0], [16.9, 487.0], [17.0, 487.0], [17.1, 488.0], [17.2, 488.0], [17.3, 489.0], [17.4, 489.0], [17.5, 490.0], [17.6, 490.0], [17.7, 491.0], [17.8, 491.0], [17.9, 492.0], [18.0, 492.0], [18.1, 492.0], [18.2, 493.0], [18.3, 493.0], [18.4, 494.0], [18.5, 494.0], [18.6, 495.0], [18.7, 495.0], [18.8, 496.0], [18.9, 496.0], [19.0, 497.0], [19.1, 497.0], [19.2, 498.0], [19.3, 498.0], [19.4, 499.0], [19.5, 499.0], [19.6, 500.0], [19.7, 500.0], [19.8, 501.0], [19.9, 501.0], [20.0, 502.0], [20.1, 503.0], [20.2, 503.0], [20.3, 504.0], [20.4, 504.0], [20.5, 505.0], [20.6, 505.0], [20.7, 506.0], [20.8, 506.0], [20.9, 507.0], [21.0, 507.0], [21.1, 508.0], [21.2, 508.0], [21.3, 509.0], [21.4, 509.0], [21.5, 510.0], [21.6, 510.0], [21.7, 511.0], [21.8, 512.0], [21.9, 512.0], [22.0, 513.0], [22.1, 513.0], [22.2, 514.0], [22.3, 514.0], [22.4, 515.0], [22.5, 515.0], [22.6, 516.0], [22.7, 516.0], [22.8, 517.0], [22.9, 517.0], [23.0, 518.0], [23.1, 519.0], [23.2, 519.0], [23.3, 520.0], [23.4, 520.0], [23.5, 521.0], [23.6, 521.0], [23.7, 522.0], [23.8, 522.0], [23.9, 523.0], [24.0, 523.0], [24.1, 524.0], [24.2, 525.0], [24.3, 525.0], [24.4, 526.0], [24.5, 526.0], [24.6, 527.0], [24.7, 527.0], [24.8, 528.0], [24.9, 529.0], [25.0, 529.0], [25.1, 530.0], [25.2, 530.0], [25.3, 531.0], [25.4, 531.0], [25.5, 532.0], [25.6, 533.0], [25.7, 533.0], [25.8, 534.0], [25.9, 534.0], [26.0, 535.0], [26.1, 536.0], [26.2, 536.0], [26.3, 537.0], [26.4, 537.0], [26.5, 538.0], [26.6, 539.0], [26.7, 539.0], [26.8, 540.0], [26.9, 540.0], [27.0, 541.0], [27.1, 542.0], [27.2, 542.0], [27.3, 543.0], [27.4, 544.0], [27.5, 544.0], [27.6, 545.0], [27.7, 546.0], [27.8, 546.0], [27.9, 547.0], [28.0, 548.0], [28.1, 548.0], [28.2, 549.0], [28.3, 550.0], [28.4, 550.0], [28.5, 551.0], [28.6, 552.0], [28.7, 552.0], [28.8, 553.0], [28.9, 554.0], [29.0, 554.0], [29.1, 555.0], [29.2, 556.0], [29.3, 556.0], [29.4, 557.0], [29.5, 558.0], [29.6, 559.0], [29.7, 559.0], [29.8, 560.0], [29.9, 561.0], [30.0, 561.0], [30.1, 562.0], [30.2, 563.0], [30.3, 564.0], [30.4, 564.0], [30.5, 565.0], [30.6, 566.0], [30.7, 567.0], [30.8, 567.0], [30.9, 568.0], [31.0, 569.0], [31.1, 570.0], [31.2, 570.0], [31.3, 571.0], [31.4, 572.0], [31.5, 573.0], [31.6, 573.0], [31.7, 574.0], [31.8, 575.0], [31.9, 576.0], [32.0, 576.0], [32.1, 577.0], [32.2, 578.0], [32.3, 579.0], [32.4, 580.0], [32.5, 580.0], [32.6, 581.0], [32.7, 582.0], [32.8, 583.0], [32.9, 584.0], [33.0, 584.0], [33.1, 585.0], [33.2, 586.0], [33.3, 587.0], [33.4, 588.0], [33.5, 588.0], [33.6, 589.0], [33.7, 590.0], [33.8, 591.0], [33.9, 592.0], [34.0, 592.0], [34.1, 593.0], [34.2, 594.0], [34.3, 595.0], [34.4, 596.0], [34.5, 596.0], [34.6, 597.0], [34.7, 598.0], [34.8, 599.0], [34.9, 599.0], [35.0, 600.0], [35.1, 601.0], [35.2, 602.0], [35.3, 603.0], [35.4, 603.0], [35.5, 604.0], [35.6, 605.0], [35.7, 606.0], [35.8, 607.0], [35.9, 607.0], [36.0, 608.0], [36.1, 609.0], [36.2, 610.0], [36.3, 611.0], [36.4, 611.0], [36.5, 612.0], [36.6, 613.0], [36.7, 614.0], [36.8, 615.0], [36.9, 615.0], [37.0, 616.0], [37.1, 617.0], [37.2, 618.0], [37.3, 619.0], [37.4, 619.0], [37.5, 620.0], [37.6, 621.0], [37.7, 622.0], [37.8, 623.0], [37.9, 624.0], [38.0, 624.0], [38.1, 625.0], [38.2, 626.0], [38.3, 627.0], [38.4, 627.0], [38.5, 628.0], [38.6, 629.0], [38.7, 630.0], [38.8, 631.0], [38.9, 632.0], [39.0, 633.0], [39.1, 633.0], [39.2, 634.0], [39.3, 635.0], [39.4, 636.0], [39.5, 637.0], [39.6, 638.0], [39.7, 638.0], [39.8, 639.0], [39.9, 640.0], [40.0, 641.0], [40.1, 642.0], [40.2, 643.0], [40.3, 644.0], [40.4, 644.0], [40.5, 645.0], [40.6, 646.0], [40.7, 647.0], [40.8, 648.0], [40.9, 649.0], [41.0, 650.0], [41.1, 651.0], [41.2, 652.0], [41.3, 653.0], [41.4, 653.0], [41.5, 654.0], [41.6, 655.0], [41.7, 656.0], [41.8, 657.0], [41.9, 658.0], [42.0, 659.0], [42.1, 660.0], [42.2, 661.0], [42.3, 662.0], [42.4, 663.0], [42.5, 664.0], [42.6, 665.0], [42.7, 666.0], [42.8, 667.0], [42.9, 668.0], [43.0, 668.0], [43.1, 669.0], [43.2, 670.0], [43.3, 671.0], [43.4, 672.0], [43.5, 673.0], [43.6, 674.0], [43.7, 675.0], [43.8, 676.0], [43.9, 677.0], [44.0, 678.0], [44.1, 679.0], [44.2, 680.0], [44.3, 682.0], [44.4, 683.0], [44.5, 684.0], [44.6, 685.0], [44.7, 686.0], [44.8, 687.0], [44.9, 688.0], [45.0, 689.0], [45.1, 690.0], [45.2, 691.0], [45.3, 692.0], [45.4, 693.0], [45.5, 694.0], [45.6, 695.0], [45.7, 696.0], [45.8, 697.0], [45.9, 698.0], [46.0, 699.0], [46.1, 700.0], [46.2, 701.0], [46.3, 702.0], [46.4, 703.0], [46.5, 704.0], [46.6, 705.0], [46.7, 706.0], [46.8, 707.0], [46.9, 708.0], [47.0, 709.0], [47.1, 710.0], [47.2, 711.0], [47.3, 712.0], [47.4, 713.0], [47.5, 715.0], [47.6, 716.0], [47.7, 717.0], [47.8, 718.0], [47.9, 719.0], [48.0, 720.0], [48.1, 721.0], [48.2, 722.0], [48.3, 723.0], [48.4, 724.0], [48.5, 725.0], [48.6, 726.0], [48.7, 727.0], [48.8, 728.0], [48.9, 729.0], [49.0, 730.0], [49.1, 731.0], [49.2, 732.0], [49.3, 734.0], [49.4, 735.0], [49.5, 736.0], [49.6, 737.0], [49.7, 738.0], [49.8, 739.0], [49.9, 740.0], [50.0, 741.0], [50.1, 743.0], [50.2, 744.0], [50.3, 745.0], [50.4, 746.0], [50.5, 747.0], [50.6, 748.0], [50.7, 750.0], [50.8, 751.0], [50.9, 752.0], [51.0, 753.0], [51.1, 754.0], [51.2, 755.0], [51.3, 756.0], [51.4, 758.0], [51.5, 759.0], [51.6, 760.0], [51.7, 761.0], [51.8, 762.0], [51.9, 764.0], [52.0, 765.0], [52.1, 766.0], [52.2, 767.0], [52.3, 768.0], [52.4, 770.0], [52.5, 771.0], [52.6, 772.0], [52.7, 773.0], [52.8, 774.0], [52.9, 776.0], [53.0, 777.0], [53.1, 778.0], [53.2, 779.0], [53.3, 781.0], [53.4, 782.0], [53.5, 783.0], [53.6, 784.0], [53.7, 786.0], [53.8, 787.0], [53.9, 788.0], [54.0, 789.0], [54.1, 791.0], [54.2, 792.0], [54.3, 793.0], [54.4, 794.0], [54.5, 796.0], [54.6, 797.0], [54.7, 798.0], [54.8, 799.0], [54.9, 801.0], [55.0, 802.0], [55.1, 803.0], [55.2, 804.0], [55.3, 805.0], [55.4, 807.0], [55.5, 808.0], [55.6, 809.0], [55.7, 811.0], [55.8, 812.0], [55.9, 813.0], [56.0, 815.0], [56.1, 816.0], [56.2, 817.0], [56.3, 818.0], [56.4, 820.0], [56.5, 821.0], [56.6, 822.0], [56.7, 824.0], [56.8, 825.0], [56.9, 826.0], [57.0, 828.0], [57.1, 829.0], [57.2, 830.0], [57.3, 832.0], [57.4, 833.0], [57.5, 834.0], [57.6, 836.0], [57.7, 837.0], [57.8, 838.0], [57.9, 840.0], [58.0, 841.0], [58.1, 843.0], [58.2, 844.0], [58.3, 846.0], [58.4, 847.0], [58.5, 848.0], [58.6, 850.0], [58.7, 851.0], [58.8, 852.0], [58.9, 854.0], [59.0, 855.0], [59.1, 857.0], [59.2, 858.0], [59.3, 860.0], [59.4, 861.0], [59.5, 863.0], [59.6, 864.0], [59.7, 865.0], [59.8, 867.0], [59.9, 868.0], [60.0, 870.0], [60.1, 871.0], [60.2, 873.0], [60.3, 874.0], [60.4, 876.0], [60.5, 877.0], [60.6, 879.0], [60.7, 880.0], [60.8, 882.0], [60.9, 883.0], [61.0, 885.0], [61.1, 886.0], [61.2, 887.0], [61.3, 889.0], [61.4, 891.0], [61.5, 892.0], [61.6, 894.0], [61.7, 895.0], [61.8, 897.0], [61.9, 898.0], [62.0, 900.0], [62.1, 902.0], [62.2, 903.0], [62.3, 905.0], [62.4, 906.0], [62.5, 908.0], [62.6, 910.0], [62.7, 911.0], [62.8, 913.0], [62.9, 915.0], [63.0, 916.0], [63.1, 918.0], [63.2, 919.0], [63.3, 921.0], [63.4, 922.0], [63.5, 924.0], [63.6, 925.0], [63.7, 927.0], [63.8, 928.0], [63.9, 930.0], [64.0, 931.0], [64.1, 933.0], [64.2, 935.0], [64.3, 936.0], [64.4, 938.0], [64.5, 940.0], [64.6, 941.0], [64.7, 943.0], [64.8, 944.0], [64.9, 946.0], [65.0, 948.0], [65.1, 949.0], [65.2, 951.0], [65.3, 953.0], [65.4, 954.0], [65.5, 956.0], [65.6, 958.0], [65.7, 960.0], [65.8, 961.0], [65.9, 963.0], [66.0, 965.0], [66.1, 967.0], [66.2, 968.0], [66.3, 970.0], [66.4, 972.0], [66.5, 974.0], [66.6, 975.0], [66.7, 977.0], [66.8, 979.0], [66.9, 981.0], [67.0, 982.0], [67.1, 984.0], [67.2, 986.0], [67.3, 988.0], [67.4, 989.0], [67.5, 991.0], [67.6, 993.0], [67.7, 995.0], [67.8, 997.0], [67.9, 998.0], [68.0, 1000.0], [68.1, 1002.0], [68.2, 1004.0], [68.3, 1006.0], [68.4, 1008.0], [68.5, 1010.0], [68.6, 1011.0], [68.7, 1013.0], [68.8, 1015.0], [68.9, 1017.0], [69.0, 1019.0], [69.1, 1021.0], [69.2, 1023.0], [69.3, 1025.0], [69.4, 1026.0], [69.5, 1028.0], [69.6, 1031.0], [69.7, 1033.0], [69.8, 1034.0], [69.9, 1036.0], [70.0, 1038.0], [70.1, 1040.0], [70.2, 1042.0], [70.3, 1044.0], [70.4, 1046.0], [70.5, 1048.0], [70.6, 1050.0], [70.7, 1052.0], [70.8, 1055.0], [70.9, 1057.0], [71.0, 1059.0], [71.1, 1061.0], [71.2, 1063.0], [71.3, 1065.0], [71.4, 1067.0], [71.5, 1069.0], [71.6, 1072.0], [71.7, 1074.0], [71.8, 1076.0], [71.9, 1078.0], [72.0, 1080.0], [72.1, 1082.0], [72.2, 1085.0], [72.3, 1087.0], [72.4, 1089.0], [72.5, 1091.0], [72.6, 1093.0], [72.7, 1095.0], [72.8, 1097.0], [72.9, 1099.0], [73.0, 1101.0], [73.1, 1104.0], [73.2, 1106.0], [73.3, 1108.0], [73.4, 1110.0], [73.5, 1113.0], [73.6, 1115.0], [73.7, 1117.0], [73.8, 1119.0], [73.9, 1121.0], [74.0, 1124.0], [74.1, 1126.0], [74.2, 1128.0], [74.3, 1131.0], [74.4, 1133.0], [74.5, 1136.0], [74.6, 1138.0], [74.7, 1140.0], [74.8, 1143.0], [74.9, 1145.0], [75.0, 1148.0], [75.1, 1150.0], [75.2, 1153.0], [75.3, 1155.0], [75.4, 1158.0], [75.5, 1160.0], [75.6, 1163.0], [75.7, 1165.0], [75.8, 1168.0], [75.9, 1170.0], [76.0, 1173.0], [76.1, 1175.0], [76.2, 1178.0], [76.3, 1180.0], [76.4, 1183.0], [76.5, 1185.0], [76.6, 1188.0], [76.7, 1191.0], [76.8, 1193.0], [76.9, 1196.0], [77.0, 1199.0], [77.1, 1202.0], [77.2, 1204.0], [77.3, 1207.0], [77.4, 1210.0], [77.5, 1213.0], [77.6, 1215.0], [77.7, 1218.0], [77.8, 1221.0], [77.9, 1224.0], [78.0, 1227.0], [78.1, 1230.0], [78.2, 1233.0], [78.3, 1236.0], [78.4, 1239.0], [78.5, 1242.0], [78.6, 1245.0], [78.7, 1248.0], [78.8, 1251.0], [78.9, 1254.0], [79.0, 1257.0], [79.1, 1260.0], [79.2, 1263.0], [79.3, 1266.0], [79.4, 1270.0], [79.5, 1273.0], [79.6, 1276.0], [79.7, 1279.0], [79.8, 1282.0], [79.9, 1285.0], [80.0, 1289.0], [80.1, 1292.0], [80.2, 1295.0], [80.3, 1298.0], [80.4, 1301.0], [80.5, 1304.0], [80.6, 1307.0], [80.7, 1311.0], [80.8, 1314.0], [80.9, 1317.0], [81.0, 1321.0], [81.1, 1324.0], [81.2, 1327.0], [81.3, 1331.0], [81.4, 1335.0], [81.5, 1338.0], [81.6, 1341.0], [81.7, 1345.0], [81.8, 1348.0], [81.9, 1352.0], [82.0, 1356.0], [82.1, 1360.0], [82.2, 1363.0], [82.3, 1367.0], [82.4, 1371.0], [82.5, 1375.0], [82.6, 1379.0], [82.7, 1382.0], [82.8, 1386.0], [82.9, 1390.0], [83.0, 1394.0], [83.1, 1398.0], [83.2, 1402.0], [83.3, 1405.0], [83.4, 1410.0], [83.5, 1414.0], [83.6, 1418.0], [83.7, 1422.0], [83.8, 1426.0], [83.9, 1431.0], [84.0, 1435.0], [84.1, 1439.0], [84.2, 1444.0], [84.3, 1448.0], [84.4, 1452.0], [84.5, 1456.0], [84.6, 1461.0], [84.7, 1465.0], [84.8, 1470.0], [84.9, 1474.0], [85.0, 1479.0], [85.1, 1484.0], [85.2, 1488.0], [85.3, 1493.0], [85.4, 1498.0], [85.5, 1503.0], [85.6, 1508.0], [85.7, 1512.0], [85.8, 1518.0], [85.9, 1523.0], [86.0, 1528.0], [86.1, 1533.0], [86.2, 1538.0], [86.3, 1543.0], [86.4, 1549.0], [86.5, 1554.0], [86.6, 1560.0], [86.7, 1565.0], [86.8, 1571.0], [86.9, 1577.0], [87.0, 1583.0], [87.1, 1589.0], [87.2, 1594.0], [87.3, 1600.0], [87.4, 1606.0], [87.5, 1612.0], [87.6, 1619.0], [87.7, 1625.0], [87.8, 1631.0], [87.9, 1637.0], [88.0, 1643.0], [88.1, 1649.0], [88.2, 1656.0], [88.3, 1662.0], [88.4, 1669.0], [88.5, 1675.0], [88.6, 1682.0], [88.7, 1689.0], [88.8, 1696.0], [88.9, 1703.0], [89.0, 1710.0], [89.1, 1717.0], [89.2, 1724.0], [89.3, 1732.0], [89.4, 1739.0], [89.5, 1746.0], [89.6, 1754.0], [89.7, 1761.0], [89.8, 1769.0], [89.9, 1777.0], [90.0, 1785.0], [90.1, 1793.0], [90.2, 1802.0], [90.3, 1810.0], [90.4, 1818.0], [90.5, 1826.0], [90.6, 1837.0], [90.7, 1845.0], [90.8, 1854.0], [90.9, 1863.0], [91.0, 1872.0], [91.1, 1881.0], [91.2, 1891.0], [91.3, 1901.0], [91.4, 1911.0], [91.5, 1922.0], [91.6, 1932.0], [91.7, 1942.0], [91.8, 1954.0], [91.9, 1965.0], [92.0, 1976.0], [92.1, 1987.0], [92.2, 1998.0], [92.3, 2010.0], [92.4, 2022.0], [92.5, 2034.0], [92.6, 2047.0], [92.7, 2059.0], [92.8, 2071.0], [92.9, 2084.0], [93.0, 2096.0], [93.1, 2109.0], [93.2, 2124.0], [93.3, 2138.0], [93.4, 2153.0], [93.5, 2167.0], [93.6, 2182.0], [93.7, 2196.0], [93.8, 2213.0], [93.9, 2230.0], [94.0, 2247.0], [94.1, 2264.0], [94.2, 2281.0], [94.3, 2297.0], [94.4, 2315.0], [94.5, 2333.0], [94.6, 2350.0], [94.7, 2369.0], [94.8, 2388.0], [94.9, 2406.0], [95.0, 2427.0], [95.1, 2447.0], [95.2, 2467.0], [95.3, 2487.0], [95.4, 2507.0], [95.5, 2529.0], [95.6, 2552.0], [95.7, 2575.0], [95.8, 2597.0], [95.9, 2621.0], [96.0, 2645.0], [96.1, 2667.0], [96.2, 2692.0], [96.3, 2717.0], [96.4, 2743.0], [96.5, 2771.0], [96.6, 2801.0], [96.7, 2832.0], [96.8, 2862.0], [96.9, 2896.0], [97.0, 2927.0], [97.1, 2962.0], [97.2, 3000.0], [97.3, 3042.0], [97.4, 3083.0], [97.5, 3128.0], [97.6, 3172.0], [97.7, 3224.0], [97.8, 3281.0], [97.9, 3337.0], [98.0, 3406.0], [98.1, 3482.0], [98.2, 3566.0], [98.3, 3649.0], [98.4, 3743.0], [98.5, 3832.0], [98.6, 3938.0], [98.7, 4048.0], [98.8, 4155.0], [98.9, 4280.0], [99.0, 4396.0], [99.1, 4512.0], [99.2, 4685.0], [99.3, 4850.0], [99.4, 5021.0], [99.5, 5250.0], [99.6, 5509.0], [99.7, 5844.0], [99.8, 6289.0], [99.9, 14198.0]], "isOverall": false, "label": "1.1 - POST - /confirmation.php", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 100.0, "maxY": 88385.0, "series": [{"data": [[1295400.0, 1.0], [85900.0, 1.0], [86300.0, 8.0], [89900.0, 2.0], [88300.0, 2.0], [87100.0, 1.0], [86700.0, 4.0], [87500.0, 2.0], [91500.0, 1.0], [100.0, 11.0], [64900.0, 1.0], [65300.0, 1.0], [68600.0, 1.0], [300.0, 1.0], [85800.0, 2.0], [86200.0, 8.0], [86600.0, 3.0], [87000.0, 1.0], [89800.0, 3.0], [87400.0, 1.0], [87800.0, 1.0], [88600.0, 1.0], [91400.0, 1.0], [400.0, 88385.0], [116200.0, 1.0], [500.0, 69801.0], [600.0, 50546.0], [700.0, 39720.0], [800.0, 32416.0], [900.0, 27167.0], [1000.0, 22458.0], [1100.0, 18620.0], [1200.0, 15088.0], [1300.0, 12664.0], [1400.0, 10362.0], [1500.0, 8420.0], [1600.0, 7074.0], [1700.0, 5983.0], [1800.0, 5038.0], [1900.0, 4212.0], [2000.0, 3692.0], [2100.0, 3163.0], [2200.0, 2662.0], [2300.0, 2491.0], [2400.0, 2278.0], [2500.0, 2023.0], [2600.0, 1904.0], [2700.0, 1647.0], [2800.0, 1452.0], [2900.0, 1295.0], [3000.0, 1091.0], [3100.0, 990.0], [3300.0, 694.0], [3200.0, 814.0], [3400.0, 603.0], [3500.0, 537.0], [3600.0, 504.0], [3700.0, 501.0], [3800.0, 458.0], [3900.0, 411.0], [4000.0, 434.0], [4100.0, 385.0], [4200.0, 358.0], [4300.0, 396.0], [4400.0, 402.0], [4500.0, 291.0], [4600.0, 241.0], [4700.0, 272.0], [4800.0, 292.0], [4900.0, 247.0], [5000.0, 215.0], [5100.0, 192.0], [5300.0, 178.0], [5200.0, 201.0], [85700.0, 1.0], [87300.0, 3.0], [5400.0, 162.0], [5500.0, 137.0], [5600.0, 147.0], [87700.0, 3.0], [86100.0, 6.0], [86900.0, 4.0], [86500.0, 4.0], [88500.0, 1.0], [89300.0, 2.0], [88100.0, 2.0], [90500.0, 2.0], [5700.0, 126.0], [5800.0, 126.0], [90900.0, 1.0], [5900.0, 108.0], [6000.0, 110.0], [6100.0, 90.0], [6200.0, 89.0], [6300.0, 82.0], [6400.0, 52.0], [6600.0, 55.0], [6500.0, 44.0], [6700.0, 34.0], [6800.0, 32.0], [6900.0, 31.0], [7100.0, 14.0], [7000.0, 22.0], [7400.0, 7.0], [7200.0, 20.0], [7300.0, 7.0], [7500.0, 4.0], [7600.0, 6.0], [7700.0, 2.0], [8500.0, 1.0], [8400.0, 1.0], [9100.0, 1.0], [9300.0, 1.0], [10200.0, 1.0], [13800.0, 1.0], [14100.0, 9.0], [14200.0, 7.0], [13900.0, 4.0], [14000.0, 10.0], [14300.0, 6.0], [14800.0, 2.0], [14600.0, 3.0], [14400.0, 2.0], [15000.0, 1.0], [15100.0, 1.0], [15200.0, 2.0], [14900.0, 1.0], [15400.0, 1.0], [15900.0, 1.0], [16800.0, 1.0], [17900.0, 3.0], [17500.0, 2.0], [19300.0, 197.0], [19100.0, 102.0], [19400.0, 3.0], [19200.0, 1.0], [18900.0, 1.0], [18700.0, 1.0], [19900.0, 3.0], [20300.0, 4.0], [28100.0, 1.0], [31700.0, 1.0], [32300.0, 1.0], [56600.0, 1.0], [58400.0, 1.0], [65000.0, 1.0], [67200.0, 1.0], [65600.0, 1.0], [86000.0, 4.0], [86800.0, 4.0], [86400.0, 4.0], [87600.0, 2.0], [87200.0, 4.0], [88400.0, 4.0], [90400.0, 1.0], [90800.0, 1.0]], "isOverall": false, "label": "1.1 - POST - /confirmation.php", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 1295400.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 366.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1.500ms"], [2, "Requests having \nresponse time > 1.500ms"], [3, "Requests in error"]], "maxY": 298032.0, "series": [{"data": [[0.0, 89293.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 298032.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1.500ms", "isController": false}, {"data": [[2.0, 65578.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1.500ms", "isController": false}, {"data": [[3.0, 366.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 1.0, "minX": 1.72747236E12, "maxY": 280.0, "series": [{"data": [[1.72747278E12, 280.0], [1.72747308E12, 280.0], [1.72747338E12, 280.0], [1.72747368E12, 280.0], [1.72747398E12, 280.0], [1.72747428E12, 1.0], [1.72747236E12, 43.03528374007649], [1.72747266E12, 280.0], [1.72747296E12, 280.0], [1.7274726E12, 279.7626714754933], [1.7274729E12, 280.0], [1.7274732E12, 280.0], [1.7274735E12, 280.0], [1.7274738E12, 280.0], [1.7274741E12, 280.0], [1.72747248E12, 169.27466440766383], [1.72747374E12, 280.0], [1.72747404E12, 280.0], [1.72747242E12, 103.19140625000048], [1.72747272E12, 280.0], [1.72747302E12, 280.0], [1.72747332E12, 280.0], [1.72747362E12, 280.0], [1.72747392E12, 280.0], [1.72747326E12, 280.0], [1.72747356E12, 280.0], [1.72747386E12, 280.0], [1.72747416E12, 257.1120431396044], [1.72747254E12, 239.33764570257566], [1.72747284E12, 280.0], [1.72747314E12, 280.0], [1.72747344E12, 280.0]], "isOverall": false, "label": "Teste Sinqia (LOAD)", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72747428E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 478.032608695652, "minX": 1.0, "maxY": 648096.0, "series": [{"data": [[2.0, 29844.666666666668], [3.0, 6083.0], [4.0, 2443.1428571428573], [5.0, 6763.888888888889], [6.0, 967.7777777777778], [7.0, 928.4166666666667], [8.0, 787.8666666666666], [9.0, 526.5384615384615], [10.0, 974.5882352941177], [11.0, 757.1111111111111], [12.0, 720.25], [13.0, 1490.6842105263156], [14.0, 693.5833333333333], [15.0, 673.5384615384614], [16.0, 636.7142857142857], [17.0, 635.2903225806451], [18.0, 639.4482758620691], [19.0, 625.2424242424242], [20.0, 933.9696969696971], [21.0, 1053.090909090909], [22.0, 616.8378378378379], [23.0, 615.4736842105262], [24.0, 639.2051282051283], [25.0, 588.4418604651163], [26.0, 621.5238095238094], [27.0, 591.2444444444444], [28.0, 493.58000000000004], [29.0, 668.3999999999999], [30.0, 659.8076923076924], [31.0, 558.280701754386], [32.0, 564.8490566037735], [33.0, 575.16], [34.0, 542.3437499999999], [35.0, 625.5], [36.0, 549.857142857143], [37.0, 550.4242424242424], [38.0, 715.968253968254], [39.0, 556.731343283582], [40.0, 553.015625], [41.0, 534.9444444444443], [42.0, 527.9736842105264], [43.0, 575.5161290322579], [44.0, 581.5857142857144], [45.0, 543.5679012345679], [46.0, 523.4054054054055], [47.0, 516.3333333333334], [48.0, 483.9999999999998], [49.0, 539.9102564102566], [50.0, 513.6172839506172], [51.0, 497.67415730337086], [52.0, 478.032608695652], [53.0, 503.1351351351352], [54.0, 598.6274509803922], [55.0, 527.8453608247421], [56.0, 502.77272727272737], [57.0, 500.1010101010101], [58.0, 503.8585858585858], [59.0, 524.7788461538463], [60.0, 510.1758241758242], [61.0, 495.17272727272723], [62.0, 498.6146788990825], [63.0, 514.9333333333332], [64.0, 505.7786885245902], [65.0, 532.2641509433961], [66.0, 527.6936936936937], [67.0, 490.3394495412844], [68.0, 517.104347826087], [69.0, 515.8389830508476], [70.0, 526.0566037735849], [71.0, 535.4800000000001], [72.0, 521.125], [73.0, 523.8679245283021], [74.0, 513.2611940298507], [75.0, 525.951219512195], [76.0, 536.2314814814815], [77.0, 552.528], [78.0, 525.8863636363639], [79.0, 523.2063492063492], [80.0, 516.1338582677166], [81.0, 536.978102189781], [82.0, 553.5864661654136], [83.0, 525.77868852459], [84.0, 531.8642857142862], [85.0, 500.6131386861312], [86.0, 499.26950354609926], [87.0, 527.5390070921985], [88.0, 527.0740740740742], [89.0, 526.1048951048951], [90.0, 535.8776978417266], [91.0, 516.0522875816995], [92.0, 550.4230769230768], [93.0, 617.5974842767296], [94.0, 536.9194630872485], [95.0, 541.0753424657531], [96.0, 562.4710144927535], [97.0, 537.8181818181818], [98.0, 525.4117647058824], [99.0, 546.6060606060607], [100.0, 517.6291390728477], [101.0, 557.2409638554217], [102.0, 593.7171052631577], [103.0, 541.9624999999999], [104.0, 509.26744186046517], [105.0, 527.9476744186044], [106.0, 541.3772455089821], [107.0, 536.2897727272726], [108.0, 521.3832335329341], [109.0, 538.6892655367234], [110.0, 535.9364161849711], [111.0, 523.8079096045195], [112.0, 526.5599999999995], [113.0, 539.2411764705884], [114.0, 549.5947368421052], [115.0, 547.5804597701153], [116.0, 549.6363636363633], [117.0, 534.9462365591401], [118.0, 548.9395604395603], [119.0, 550.067796610169], [120.0, 556.2406417112293], [121.0, 548.3121693121698], [122.0, 544.05376344086], [123.0, 547.5706806282723], [124.0, 528.1634615384617], [125.0, 548.93085106383], [126.0, 549.0663265306122], [127.0, 551.1930693069299], [128.0, 541.7846889952154], [129.0, 517.3429951690816], [130.0, 515.3084112149534], [131.0, 514.8938053097346], [132.0, 529.625], [133.0, 513.6682692307689], [134.0, 506.90495867768607], [135.0, 506.4703196347031], [136.0, 511.71621621621625], [137.0, 518.552511415525], [138.0, 531.9502262443441], [139.0, 544.5268292682925], [140.0, 579.1584158415842], [141.0, 589.2705314009663], [142.0, 534.1017699115042], [143.0, 549.6244131455395], [144.0, 573.3101851851852], [145.0, 572.3535353535354], [146.0, 585.3348623853215], [147.0, 552.0940170940169], [148.0, 537.9095022624431], [149.0, 565.9013452914801], [150.0, 582.5492957746475], [151.0, 599.7731481481484], [152.0, 579.9730941704037], [153.0, 572.5625000000003], [154.0, 612.485714285714], [155.0, 623.0563380281692], [156.0, 610.315315315315], [157.0, 556.5041322314052], [158.0, 579.7181818181822], [159.0, 617.7663551401871], [160.0, 584.0775510204074], [161.0, 571.5309734513268], [162.0, 613.6350710900473], [163.0, 630.1434782608696], [164.0, 613.2466367713004], [165.0, 601.8705357142856], [166.0, 629.5963302752297], [167.0, 621.196581196581], [168.0, 630.3073394495409], [169.0, 652.8755760368664], [170.0, 633.6832579185523], [171.0, 639.3476394849789], [172.0, 589.9618644067797], [173.0, 622.1527777777778], [174.0, 664.5681818181821], [175.0, 645.9610389610382], [176.0, 644.4557522123889], [177.0, 645.1415525114156], [178.0, 668.2752293577978], [179.0, 674.7476635514016], [180.0, 678.2180094786728], [181.0, 709.8056872037915], [182.0, 658.7364016736402], [183.0, 624.9702127659579], [184.0, 702.1330049261084], [185.0, 689.4770642201835], [186.0, 798.7688888888891], [187.0, 751.9999999999999], [188.0, 695.0095238095239], [189.0, 731.1943127962087], [190.0, 707.4377682403432], [191.0, 693.6886792452829], [192.0, 745.9134615384613], [193.0, 761.4009216589859], [194.0, 724.3703703703701], [195.0, 699.2931034482762], [196.0, 707.859813084112], [197.0, 732.9722222222225], [198.0, 729.6741071428572], [199.0, 728.2242990654207], [200.0, 798.1666666666667], [201.0, 770.4122807017546], [202.0, 719.26267281106], [203.0, 729.695652173913], [204.0, 789.5605381165917], [205.0, 786.6769911504424], [206.0, 907.5068493150679], [207.0, 736.6116071428572], [208.0, 787.9285714285716], [209.0, 796.0456431535267], [210.0, 778.9695652173917], [211.0, 754.6508620689655], [212.0, 764.2752293577985], [213.0, 830.2512820512819], [214.0, 782.178260869565], [215.0, 740.6625514403291], [216.0, 747.0434782608696], [217.0, 826.2105263157897], [218.0, 813.3427230046949], [219.0, 929.95], [220.0, 786.2901960784312], [221.0, 827.7543859649126], [222.0, 907.8640776699025], [223.0, 845.9569377990427], [224.0, 835.0129310344828], [225.0, 861.359832635983], [226.0, 775.4424778761058], [227.0, 835.1014492753626], [228.0, 880.1516587677727], [229.0, 948.6999999999999], [230.0, 809.6475770925111], [231.0, 815.7123893805312], [232.0, 816.3922413793099], [233.0, 799.0217391304346], [234.0, 865.5981308411216], [235.0, 989.8468468468461], [236.0, 940.5213675213679], [237.0, 827.4329004329004], [238.0, 930.0291262135921], [239.0, 993.2522522522523], [240.0, 877.5043859649114], [241.0, 863.7122641509436], [242.0, 955.4285714285713], [243.0, 846.0882352941177], [244.0, 889.3886255924166], [245.0, 1093.8762886597933], [246.0, 973.6265560165975], [247.0, 895.8381742738588], [248.0, 907.4068627450984], [249.0, 975.8801843317974], [250.0, 923.8800000000002], [251.0, 881.5263157894735], [252.0, 964.4782608695649], [253.0, 956.9644268774707], [254.0, 887.6952789699571], [255.0, 957.4845360824739], [257.0, 921.3671875], [256.0, 1017.5695067264576], [258.0, 833.679324894515], [259.0, 1023.1573604060908], [260.0, 1018.0044642857142], [261.0, 948.2460317460315], [262.0, 863.0913043478255], [263.0, 989.4019138755984], [264.0, 1034.7500000000002], [270.0, 991.2532751091708], [271.0, 985.6697247706421], [268.0, 1043.5648148148152], [269.0, 1025.260869565217], [265.0, 945.9159663865555], [266.0, 948.3809523809524], [267.0, 967.9074074074072], [273.0, 993.4215246636768], [272.0, 953.6709401709396], [274.0, 1044.4399999999998], [275.0, 1006.1902654867255], [276.0, 956.9118942731271], [277.0, 1013.5662100456635], [278.0, 1109.6812227074242], [279.0, 1438.114035087719], [280.0, 1057.9212437629642], [1.0, 648096.0]], "isOverall": false, "label": "1.1 - POST - /confirmation.php", "isController": false}, {"data": [[268.6855642013874, 1024.849482316234]], "isOverall": false, "label": "1.1 - POST - /confirmation.php-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 280.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 14.733333333333333, "minX": 1.72747236E12, "maxY": 696782.3, "series": [{"data": [[1.72747278E12, 682806.1], [1.72747308E12, 671271.0166666667], [1.72747338E12, 675763.3666666667], [1.72747368E12, 688906.7333333333], [1.72747398E12, 690674.9833333333], [1.72747428E12, 61.916666666666664], [1.72747236E12, 148214.58333333334], [1.72747266E12, 666646.6333333333], [1.72747296E12, 682861.55], [1.7274726E12, 677426.1166666667], [1.7274729E12, 669429.8], [1.7274732E12, 669524.8166666667], [1.7274735E12, 691694.35], [1.7274738E12, 696146.7], [1.7274741E12, 681134.4], [1.72747248E12, 669339.2666666667], [1.72747374E12, 687003.6333333333], [1.72747404E12, 694044.5666666667], [1.72747242E12, 480264.9166666667], [1.72747272E12, 686560.9666666667], [1.72747302E12, 683788.3166666667], [1.72747332E12, 677400.0], [1.72747362E12, 672815.85], [1.72747392E12, 687822.6166666667], [1.72747326E12, 690243.5666666667], [1.72747356E12, 684329.0166666667], [1.72747386E12, 676091.7833333333], [1.72747416E12, 72841.65], [1.72747254E12, 681103.95], [1.72747284E12, 669320.55], [1.72747314E12, 667362.75], [1.72747344E12, 696782.3]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72747278E12, 389690.7], [1.72747308E12, 382542.75], [1.72747338E12, 385679.4166666667], [1.72747368E12, 393245.75], [1.72747398E12, 394247.95], [1.72747428E12, 14.733333333333333], [1.72747236E12, 84689.28333333334], [1.72747266E12, 380454.45], [1.72747296E12, 389626.51666666666], [1.7274726E12, 386450.3], [1.7274729E12, 381831.65], [1.7274732E12, 382014.76666666666], [1.7274735E12, 394633.61666666664], [1.7274738E12, 397493.65], [1.7274741E12, 388551.15], [1.72747248E12, 382109.4], [1.72747374E12, 391938.6666666667], [1.72747404E12, 396088.25], [1.72747242E12, 274112.35], [1.72747272E12, 391817.36666666664], [1.72747302E12, 390210.38333333336], [1.72747332E12, 386677.95], [1.72747362E12, 384017.63333333336], [1.72747392E12, 392142.48333333334], [1.72747326E12, 394145.06666666665], [1.72747356E12, 390562.36666666664], [1.72747386E12, 385851.0833333333], [1.72747416E12, 41516.95], [1.72747254E12, 388649.65], [1.72747284E12, 382114.6666666667], [1.72747314E12, 380822.36666666664], [1.72747344E12, 397662.43333333335]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72747428E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 499.1370185239644, "minX": 1.72747236E12, "maxY": 1295446.0, "series": [{"data": [[1.72747278E12, 1050.5036407766984], [1.72747308E12, 1084.472531044799], [1.72747338E12, 1071.1230640165224], [1.72747368E12, 1029.6753180983674], [1.72747398E12, 1033.0224158615936], [1.72747428E12, 1295446.0], [1.72747236E12, 499.1370185239644], [1.72747266E12, 1079.2064250196229], [1.72747296E12, 1076.269341340323], [1.7274726E12, 1068.2140787016258], [1.7274729E12, 1087.8001303356152], [1.7274732E12, 1085.1992704058373], [1.7274735E12, 1035.29097559437], [1.7274738E12, 1057.200075145594], [1.7274741E12, 1071.2743402510869], [1.72747248E12, 638.313176071941], [1.72747374E12, 1042.3415021268497], [1.72747404E12, 1033.4942832014044], [1.72747242E12, 527.2546329941861], [1.72747272E12, 1043.7273362556366], [1.72747302E12, 1035.5073027616495], [1.72747332E12, 1052.9545513068094], [1.72747362E12, 1078.8060523587449], [1.72747392E12, 1054.1410264543492], [1.72747326E12, 1055.1200252684787], [1.72747356E12, 1040.6512235533994], [1.72747386E12, 1061.3422580645108], [1.72747416E12, 1278.5338526063501], [1.72747254E12, 892.1865633405941], [1.72747284E12, 1078.9747882736187], [1.72747314E12, 1071.1778547617541], [1.72747344E12, 1041.1438407611388]], "isOverall": false, "label": "1.1 - POST - /confirmation.php", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72747428E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 161.5930866052974, "minX": 1.72747236E12, "maxY": 197.96118788591545, "series": [{"data": [[1.72747278E12, 167.264243740419], [1.72747308E12, 166.36603601846474], [1.72747338E12, 163.57466442953043], [1.72747368E12, 162.01164778122418], [1.72747398E12, 161.7719896445036], [1.72747428E12, 166.0], [1.72747236E12, 197.96118788591545], [1.72747266E12, 168.69556398848533], [1.72747296E12, 167.4821439979559], [1.7274726E12, 173.1186964642237], [1.7274729E12, 165.83023786249555], [1.7274732E12, 164.83356133150957], [1.7274735E12, 162.3782556599612], [1.7274738E12, 161.5930866052974], [1.7274741E12, 168.27184217268763], [1.72747248E12, 178.5241756809591], [1.72747374E12, 170.23693733731105], [1.72747404E12, 164.24776982033006], [1.72747242E12, 181.7949672965115], [1.72747272E12, 170.66323613493446], [1.72747302E12, 163.7654187129264], [1.72747332E12, 162.1424616969227], [1.72747362E12, 161.6268144116131], [1.72747392E12, 165.3456194886766], [1.72747326E12, 167.91648768161747], [1.72747356E12, 162.32545245985162], [1.72747386E12, 161.99651612903298], [1.72747416E12, 183.87896944278032], [1.72747254E12, 173.80306135519422], [1.72747284E12, 166.57166123778455], [1.72747314E12, 162.95803647297248], [1.72747344E12, 161.86104156234316]], "isOverall": false, "label": "1.1 - POST - /confirmation.php", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72747428E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.0, "minX": 1.72747236E12, "maxY": 2.0311563810665088, "series": [{"data": [[1.72747278E12, 0.710270822687788], [1.72747308E12, 0.34041999869969347], [1.72747338E12, 0.34047496128033067], [1.72747368E12, 0.45356713299993656], [1.72747398E12, 0.453684409926123], [1.72747428E12, 0.0], [1.72747236E12, 0.219935313143193], [1.72747266E12, 0.2773488615545651], [1.72747296E12, 0.5874273302242381], [1.7274726E12, 0.46551168931538517], [1.7274729E12, 0.3421309872922763], [1.7274732E12, 0.4717607973421925], [1.7274735E12, 0.651131992180113], [1.7274738E12, 0.383931367023608], [1.7274741E12, 0.46208045093517847], [1.72747248E12, 0.3643946305226123], [1.72747374E12, 0.38937210335851713], [1.72747404E12, 0.38918205804749356], [1.72747242E12, 0.14117005813953468], [1.72747272E12, 0.4583571564703665], [1.72747302E12, 0.4579373684546211], [1.72747332E12, 0.6572679284150884], [1.72747362E12, 0.4683773976153446], [1.72747392E12, 0.33470786017889964], [1.72747326E12, 0.3250157927984845], [1.72747356E12, 0.2649757838388987], [1.72747386E12, 0.5313548387096744], [1.72747416E12, 2.0311563810665088], [1.72747254E12, 0.3925323427693117], [1.72747284E12, 0.27146579804560284], [1.72747314E12, 0.402836786718087], [1.72747344E12, 0.5165873810716102]], "isOverall": false, "label": "1.1 - POST - /confirmation.php", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72747428E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 405.0, "minX": 1.72747236E12, "maxY": 116248.0, "series": [{"data": [[1.72747278E12, 90586.0], [1.72747308E12, 88579.0], [1.72747338E12, 87744.0], [1.72747368E12, 88407.0], [1.72747398E12, 5529.0], [1.72747236E12, 1468.0], [1.72747266E12, 89985.0], [1.72747296E12, 91584.0], [1.7274726E12, 86685.0], [1.7274729E12, 87422.0], [1.7274732E12, 87543.0], [1.7274735E12, 5011.0], [1.7274738E12, 89851.0], [1.7274741E12, 116248.0], [1.72747248E12, 15116.0], [1.72747374E12, 88438.0], [1.72747404E12, 88198.0], [1.72747242E12, 1597.0], [1.72747272E12, 88332.0], [1.72747302E12, 86378.0], [1.72747332E12, 86187.0], [1.72747362E12, 90517.0], [1.72747392E12, 87761.0], [1.72747326E12, 91465.0], [1.72747356E12, 86505.0], [1.72747386E12, 86266.0], [1.72747416E12, 88343.0], [1.72747254E12, 3376.0], [1.72747284E12, 89961.0], [1.72747314E12, 89366.0], [1.72747344E12, 87874.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72747278E12, 1543.0], [1.72747308E12, 1784.0], [1.72747338E12, 1814.0], [1.72747368E12, 1893.699999999999], [1.72747398E12, 1929.1000000000004], [1.72747236E12, 573.0], [1.72747266E12, 1945.5], [1.72747296E12, 1813.0], [1.7274726E12, 1822.0], [1.7274729E12, 1689.0], [1.7274732E12, 1722.0], [1.7274735E12, 1815.5], [1.7274738E12, 1776.8999999999996], [1.7274741E12, 2012.0], [1.72747248E12, 929.0], [1.72747374E12, 1830.0], [1.72747404E12, 1839.8999999999996], [1.72747242E12, 657.0], [1.72747272E12, 1880.1000000000004], [1.72747302E12, 1882.0], [1.72747332E12, 1961.2000000000007], [1.72747362E12, 2087.1000000000004], [1.72747392E12, 1848.0], [1.72747326E12, 1948.0], [1.72747356E12, 1811.0], [1.72747386E12, 2110.8999999999996], [1.72747416E12, 1856.2000000000003], [1.72747254E12, 1538.0], [1.72747284E12, 1485.7000000000007], [1.72747314E12, 1705.0], [1.72747344E12, 1843.300000000001]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72747278E12, 5822.139999999999], [1.72747308E12, 3397.0], [1.72747338E12, 4979.1900000000005], [1.72747368E12, 4071.1800000000003], [1.72747398E12, 4609.129999999997], [1.72747236E12, 866.96], [1.72747266E12, 4975.0], [1.72747296E12, 3683.8599999999988], [1.7274726E12, 2860.8600000000006], [1.7274729E12, 5441.709999999999], [1.7274732E12, 5942.149999999996], [1.7274735E12, 4203.0999999999985], [1.7274738E12, 3856.1699999999983], [1.7274741E12, 3528.0], [1.72747248E12, 1555.5499999999993], [1.72747374E12, 3308.0], [1.72747404E12, 3620.99], [1.72747242E12, 920.6399999999994], [1.72747272E12, 2983.709999999999], [1.72747302E12, 3337.0], [1.72747332E12, 3211.319999999996], [1.72747362E12, 3586.619999999999], [1.72747392E12, 4266.98], [1.72747326E12, 3030.7299999999996], [1.72747356E12, 3547.600000000006], [1.72747386E12, 3196.1800000000003], [1.72747416E12, 4522.34], [1.72747254E12, 2497.0], [1.72747284E12, 6773.8499999999985], [1.72747314E12, 5410.18], [1.72747344E12, 2850.33]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72747278E12, 2623.699999999997], [1.72747308E12, 2379.0], [1.72747338E12, 2556.699999999997], [1.72747368E12, 2674.0], [1.72747398E12, 2750.0], [1.72747236E12, 606.0], [1.72747266E12, 2877.25], [1.72747296E12, 2269.8999999999996], [1.7274726E12, 2207.2999999999993], [1.7274729E12, 2488.7999999999884], [1.7274732E12, 3329.449999999999], [1.7274735E12, 3113.5], [1.7274738E12, 2361.949999999999], [1.7274741E12, 2742.0], [1.72747248E12, 1096.0], [1.72747374E12, 2448.0], [1.72747404E12, 2374.0], [1.72747242E12, 725.0], [1.72747272E12, 2246.0999999999985], [1.72747302E12, 2362.199999999997], [1.72747332E12, 2506.5999999999985], [1.72747362E12, 2568.0], [1.72747392E12, 2694.5999999999985], [1.72747326E12, 2420.2999999999993], [1.72747356E12, 2386.0], [1.72747386E12, 2599.0], [1.72747416E12, 3798.699999999996], [1.72747254E12, 1879.7999999999993], [1.72747284E12, 2938.0], [1.72747314E12, 2557.899999999998], [1.72747344E12, 2163.0]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.72747278E12, 408.0], [1.72747308E12, 408.0], [1.72747338E12, 406.0], [1.72747368E12, 407.0], [1.72747398E12, 408.0], [1.72747236E12, 405.0], [1.72747266E12, 407.0], [1.72747296E12, 410.0], [1.7274726E12, 406.0], [1.7274729E12, 410.0], [1.7274732E12, 407.0], [1.7274735E12, 406.0], [1.7274738E12, 405.0], [1.7274741E12, 407.0], [1.72747248E12, 406.0], [1.72747374E12, 406.0], [1.72747404E12, 406.0], [1.72747242E12, 406.0], [1.72747272E12, 406.0], [1.72747302E12, 406.0], [1.72747332E12, 406.0], [1.72747362E12, 407.0], [1.72747392E12, 407.0], [1.72747326E12, 406.0], [1.72747356E12, 407.0], [1.72747386E12, 406.0], [1.72747416E12, 412.0], [1.72747254E12, 406.0], [1.72747284E12, 407.0], [1.72747314E12, 407.0], [1.72747344E12, 406.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72747278E12, 737.0], [1.72747308E12, 817.0], [1.72747338E12, 779.0], [1.72747368E12, 758.0], [1.72747398E12, 720.0], [1.72747236E12, 478.0], [1.72747266E12, 759.0], [1.72747296E12, 823.0], [1.7274726E12, 874.0], [1.7274729E12, 725.0], [1.7274732E12, 698.0], [1.7274735E12, 757.0], [1.7274738E12, 768.0], [1.7274741E12, 753.0], [1.72747248E12, 556.0], [1.72747374E12, 781.0], [1.72747404E12, 767.0], [1.72747242E12, 499.0], [1.72747272E12, 819.0], [1.72747302E12, 811.0], [1.72747332E12, 826.0], [1.72747362E12, 760.5], [1.72747392E12, 764.0], [1.72747326E12, 823.0], [1.72747356E12, 798.0], [1.72747386E12, 803.0], [1.72747416E12, 819.0], [1.72747254E12, 726.0], [1.72747284E12, 664.0], [1.72747314E12, 753.0], [1.72747344E12, 829.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72747416E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 161.0, "minX": 1.0, "maxY": 654641.5, "series": [{"data": [[2.0, 2717.0], [5.0, 569.0], [7.0, 547.0], [9.0, 2564.0], [11.0, 1298.0], [14.0, 501.0], [16.0, 502.5], [17.0, 4522.5], [18.0, 501.0], [21.0, 496.5], [24.0, 487.5], [30.0, 498.5], [31.0, 481.0], [33.0, 498.0], [34.0, 495.5], [36.0, 500.0], [37.0, 485.0], [42.0, 486.5], [45.0, 483.0], [46.0, 504.5], [50.0, 494.5], [54.0, 482.5], [56.0, 486.5], [57.0, 483.0], [62.0, 488.0], [63.0, 492.0], [66.0, 467.0], [69.0, 463.0], [72.0, 471.5], [73.0, 489.0], [77.0, 471.0], [76.0, 474.5], [78.0, 477.0], [82.0, 465.5], [81.0, 483.0], [83.0, 1364.0], [90.0, 463.5], [91.0, 469.0], [92.0, 471.5], [93.0, 473.0], [94.0, 484.0], [97.0, 488.0], [101.0, 469.0], [105.0, 453.0], [104.0, 477.5], [111.0, 479.0], [112.0, 463.5], [114.0, 489.0], [117.0, 467.0], [116.0, 478.5], [122.0, 471.0], [124.0, 482.5], [127.0, 484.0], [126.0, 479.5], [132.0, 478.0], [130.0, 485.0], [129.0, 485.0], [135.0, 486.0], [138.0, 480.5], [141.0, 496.0], [136.0, 478.5], [140.0, 502.5], [148.0, 472.5], [151.0, 497.0], [152.0, 479.0], [154.0, 492.0], [160.0, 508.5], [162.0, 491.5], [163.0, 488.0], [164.0, 496.5], [173.0, 489.0], [171.0, 507.0], [170.0, 488.5], [169.0, 503.0], [176.0, 506.5], [183.0, 486.0], [188.0, 490.5], [187.0, 508.5], [184.0, 508.5], [190.0, 503.0], [199.0, 487.0], [197.0, 497.0], [201.0, 499.0], [204.0, 505.5], [202.0, 502.0], [209.0, 507.0], [210.0, 527.5], [212.0, 517.0], [213.0, 513.0], [217.0, 520.0], [221.0, 517.0], [219.0, 889.0], [228.0, 647.0], [224.0, 616.0], [225.0, 785.0], [227.0, 858.5], [229.0, 933.5], [226.0, 874.0], [230.0, 706.5], [231.0, 763.0], [239.0, 700.0], [237.0, 758.0], [233.0, 652.5], [232.0, 859.5], [236.0, 804.0], [238.0, 818.0], [234.0, 799.5], [235.0, 802.0], [245.0, 771.0], [242.0, 765.0], [246.0, 760.0], [240.0, 798.0], [243.0, 763.5], [244.0, 808.0], [241.0, 846.0], [247.0, 789.0], [249.0, 773.0], [251.0, 770.5], [250.0, 761.0], [253.0, 750.0], [248.0, 712.0], [252.0, 800.0], [254.0, 767.0], [255.0, 791.0], [258.0, 754.0], [259.0, 738.0], [270.0, 751.0], [269.0, 726.0], [268.0, 744.0], [262.0, 744.0], [267.0, 760.0], [260.0, 737.0], [261.0, 766.0], [271.0, 730.0], [257.0, 750.5], [266.0, 739.0], [264.0, 772.0], [265.0, 777.0], [256.0, 758.0], [263.0, 761.0], [275.0, 723.0], [277.0, 745.0], [278.0, 718.0], [283.0, 709.0], [282.0, 739.5], [280.0, 711.0], [287.0, 732.0], [281.0, 735.5], [274.0, 760.5], [273.0, 725.0], [272.0, 750.0], [279.0, 654.5], [276.0, 769.5], [285.0, 722.0], [284.0, 723.0], [286.0, 779.0], [302.0, 762.0], [291.0, 691.0], [297.0, 777.0], [296.0, 676.0], [299.0, 589.0], [290.0, 778.5], [289.0, 772.0], [295.0, 748.0], [292.0, 774.5], [294.0, 756.5], [300.0, 698.0], [298.0, 584.5], [304.0, 676.0], [311.0, 742.0], [1.0, 58268.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[11.0, 14152.0], [17.0, 14233.0], [231.0, 19361.0], [237.0, 19344.5], [239.0, 19262.0], [232.0, 16774.0], [233.0, 19181.0], [236.0, 14379.0], [235.0, 19350.0], [245.0, 19343.0], [240.0, 19174.0], [243.0, 19344.0], [247.0, 19181.0], [246.0, 19182.0], [242.0, 19344.0], [241.0, 19164.0], [244.0, 19179.0], [255.0, 19343.0], [251.0, 19345.0], [250.0, 19330.0], [252.0, 19191.0], [253.0, 19336.0], [254.0, 19338.5], [249.0, 19180.0], [248.0, 19241.5], [258.0, 19180.0], [268.0, 19256.0], [270.0, 19338.5], [269.0, 19328.0], [261.0, 19329.0], [260.0, 19334.0], [1.0, 654641.5], [256.0, 19343.0], [263.0, 19335.0], [262.0, 19257.0], [257.0, 19178.0], [271.0, 19328.0], [267.0, 19182.0], [266.0, 19343.0], [265.0, 19344.0], [264.0, 19263.5], [259.0, 19340.5], [272.0, 19348.0], [280.0, 19347.0], [287.0, 19162.0], [286.0, 19341.0], [285.0, 19341.5], [275.0, 19257.5], [276.0, 19253.0], [277.0, 19337.5], [274.0, 19346.0], [273.0, 19178.0], [281.0, 19346.5], [279.0, 19257.5], [278.0, 19253.0], [282.0, 19262.5], [283.0, 19251.5], [290.0, 19175.5], [296.0, 19358.0], [295.0, 16690.5], [289.0, 19269.0], [297.0, 161.0], [304.0, 19350.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 311.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 1.0, "maxY": 227.0, "series": [{"data": [[2.0, 167.5], [5.0, 173.0], [7.0, 193.0], [9.0, 167.0], [11.0, 171.0], [14.0, 177.0], [16.0, 226.0], [17.0, 160.0], [18.0, 227.0], [21.0, 220.0], [24.0, 218.5], [30.0, 181.0], [31.0, 208.0], [33.0, 214.0], [34.0, 213.5], [36.0, 209.5], [37.0, 210.0], [42.0, 204.0], [45.0, 214.0], [46.0, 215.0], [50.0, 209.0], [54.0, 200.0], [56.0, 195.5], [57.0, 192.0], [62.0, 190.5], [63.0, 182.0], [66.0, 172.0], [69.0, 164.0], [72.0, 166.0], [73.0, 171.0], [77.0, 166.0], [76.0, 166.0], [78.0, 164.5], [82.0, 162.0], [81.0, 164.0], [83.0, 162.0], [90.0, 163.0], [91.0, 162.0], [92.0, 162.5], [93.0, 164.0], [94.0, 163.0], [97.0, 163.0], [101.0, 162.0], [105.0, 162.0], [104.0, 161.0], [111.0, 162.0], [112.0, 162.0], [114.0, 162.0], [117.0, 161.0], [116.0, 162.0], [122.0, 162.0], [124.0, 162.0], [127.0, 162.0], [126.0, 162.0], [132.0, 161.0], [130.0, 161.5], [129.0, 161.0], [135.0, 162.0], [138.0, 162.0], [141.0, 162.0], [136.0, 161.0], [140.0, 161.0], [148.0, 162.0], [151.0, 161.0], [152.0, 162.0], [154.0, 161.0], [160.0, 162.0], [162.0, 162.0], [163.0, 162.0], [164.0, 162.5], [173.0, 162.0], [171.0, 161.0], [170.0, 161.0], [169.0, 163.0], [176.0, 161.0], [183.0, 162.0], [188.0, 161.0], [187.0, 162.0], [184.0, 162.0], [190.0, 161.0], [199.0, 162.0], [197.0, 162.0], [201.0, 162.0], [204.0, 161.5], [202.0, 161.0], [209.0, 162.0], [210.0, 161.0], [212.0, 162.0], [213.0, 161.0], [217.0, 161.0], [221.0, 161.0], [219.0, 161.0], [228.0, 162.0], [224.0, 162.0], [225.0, 162.0], [227.0, 162.0], [229.0, 162.0], [226.0, 162.0], [230.0, 162.0], [231.0, 162.0], [239.0, 162.0], [237.0, 162.0], [233.0, 162.0], [232.0, 162.0], [236.0, 162.0], [238.0, 161.0], [234.0, 162.0], [235.0, 162.0], [245.0, 162.0], [242.0, 162.0], [246.0, 162.0], [240.0, 162.0], [243.0, 162.0], [244.0, 162.0], [241.0, 162.0], [247.0, 162.0], [249.0, 162.0], [251.0, 162.0], [250.0, 162.0], [253.0, 162.0], [248.0, 162.0], [252.0, 162.0], [254.0, 162.0], [255.0, 162.0], [258.0, 162.0], [259.0, 162.0], [270.0, 162.0], [269.0, 162.0], [268.0, 162.0], [262.0, 162.0], [267.0, 162.0], [260.0, 162.0], [261.0, 162.0], [271.0, 162.0], [257.0, 162.0], [266.0, 162.0], [264.0, 162.0], [265.0, 162.0], [256.0, 162.0], [263.0, 162.0], [275.0, 162.0], [277.0, 162.0], [278.0, 162.0], [283.0, 162.0], [282.0, 162.0], [280.0, 162.0], [287.0, 161.0], [281.0, 162.0], [274.0, 162.0], [273.0, 162.0], [272.0, 161.0], [279.0, 162.0], [276.0, 162.0], [285.0, 162.0], [284.0, 162.0], [286.0, 162.0], [302.0, 162.0], [291.0, 162.0], [297.0, 162.0], [296.0, 161.0], [299.0, 160.0], [290.0, 161.0], [289.0, 161.0], [295.0, 161.0], [292.0, 162.0], [294.0, 161.0], [300.0, 161.0], [298.0, 162.0], [304.0, 162.0], [311.0, 161.0], [1.0, 158.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[11.0, 167.0], [17.0, 158.0], [231.0, 169.0], [237.0, 158.5], [239.0, 86.5], [232.0, 155.0], [233.0, 0.0], [236.0, 160.0], [235.0, 156.0], [245.0, 173.0], [240.0, 0.0], [243.0, 165.0], [247.0, 0.0], [246.0, 168.5], [242.0, 163.5], [241.0, 164.0], [244.0, 0.0], [255.0, 168.0], [251.0, 167.0], [250.0, 161.0], [252.0, 164.0], [253.0, 159.0], [254.0, 163.0], [249.0, 164.0], [248.0, 166.0], [258.0, 0.0], [268.0, 168.0], [270.0, 162.0], [269.0, 155.0], [261.0, 165.0], [260.0, 166.5], [1.0, 167.5], [256.0, 167.0], [263.0, 171.0], [262.0, 157.5], [257.0, 0.0], [271.0, 162.0], [267.0, 163.0], [266.0, 162.0], [265.0, 162.5], [264.0, 159.0], [259.0, 163.0], [272.0, 162.0], [280.0, 166.0], [287.0, 0.0], [286.0, 162.0], [285.0, 162.0], [275.0, 160.5], [276.0, 158.5], [277.0, 162.5], [274.0, 168.0], [273.0, 159.5], [281.0, 165.0], [279.0, 160.0], [278.0, 163.0], [282.0, 81.5], [283.0, 84.5], [290.0, 0.0], [296.0, 176.0], [295.0, 77.5], [289.0, 87.0], [297.0, 160.5], [304.0, 164.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 311.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 23.166666666666668, "minX": 1.72747236E12, "maxY": 266.26666666666665, "series": [{"data": [[1.72747278E12, 260.93333333333334], [1.72747308E12, 256.35], [1.72747338E12, 258.26666666666665], [1.72747368E12, 263.2], [1.72747398E12, 263.68333333333334], [1.72747236E12, 57.75], [1.72747266E12, 254.73333333333332], [1.72747296E12, 261.23333333333335], [1.7274726E12, 258.8833333333333], [1.7274729E12, 255.4], [1.7274732E12, 255.75], [1.7274735E12, 264.28333333333336], [1.7274738E12, 266.15], [1.7274741E12, 260.2], [1.72747248E12, 256.4166666666667], [1.72747374E12, 262.6], [1.72747404E12, 265.56666666666666], [1.72747242E12, 184.63333333333333], [1.72747272E12, 262.35], [1.72747302E12, 261.31666666666666], [1.72747332E12, 258.9], [1.72747362E12, 257.2], [1.72747392E12, 263.26666666666665], [1.72747326E12, 263.93333333333334], [1.72747356E12, 261.53333333333336], [1.72747386E12, 257.78333333333336], [1.72747416E12, 23.166666666666668], [1.72747254E12, 261.9166666666667], [1.72747284E12, 255.83333333333334], [1.72747314E12, 254.98333333333332], [1.72747344E12, 266.26666666666665]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72747416E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72747236E12, "maxY": 266.1, "series": [{"data": [[1.72747278E12, 260.7], [1.72747308E12, 255.81666666666666], [1.72747338E12, 258.03333333333336], [1.72747368E12, 263.1666666666667], [1.72747398E12, 263.8], [1.72747236E12, 56.68333333333333], [1.72747266E12, 254.56666666666666], [1.72747296E12, 260.68333333333334], [1.7274726E12, 258.55], [1.7274729E12, 255.46666666666667], [1.7274732E12, 255.6], [1.7274735E12, 264.06666666666666], [1.7274738E12, 266.0], [1.7274741E12, 259.98333333333335], [1.72747248E12, 255.73333333333332], [1.72747374E12, 262.23333333333335], [1.72747404E12, 265.0], [1.72747242E12, 183.46666666666667], [1.72747272E12, 262.1333333333333], [1.72747302E12, 261.05], [1.72747332E12, 258.78333333333336], [1.72747362E12, 256.96666666666664], [1.72747392E12, 262.21666666666664], [1.72747326E12, 263.76666666666665], [1.72747356E12, 261.31666666666666], [1.72747386E12, 258.1666666666667], [1.72747416E12, 27.75], [1.72747254E12, 260.05], [1.72747284E12, 255.7], [1.72747314E12, 254.83333333333334], [1.72747344E12, 266.1]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72747374E12, 0.05], [1.72747278E12, 0.05], [1.72747404E12, 0.03333333333333333], [1.72747308E12, 0.1], [1.72747338E12, 0.05], [1.72747272E12, 0.016666666666666666], [1.72747302E12, 0.016666666666666666], [1.72747392E12, 0.05], [1.72747296E12, 0.05], [1.72747326E12, 0.016666666666666666], [1.72747356E12, 0.016666666666666666], [1.72747386E12, 0.016666666666666666], [1.72747416E12, 0.05], [1.7274738E12, 0.03333333333333333], [1.7274741E12, 0.03333333333333333], [1.72747314E12, 0.05], [1.72747248E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: javax.net.ssl.SSLHandshakeException", "isController": false}, {"data": [[1.72747278E12, 0.03333333333333333], [1.72747308E12, 0.16666666666666666], [1.72747338E12, 0.08333333333333333], [1.72747368E12, 0.06666666666666667], [1.72747398E12, 0.03333333333333333], [1.72747266E12, 0.03333333333333333], [1.72747296E12, 0.03333333333333333], [1.7274726E12, 0.1], [1.7274729E12, 0.15], [1.7274732E12, 0.11666666666666667], [1.7274735E12, 0.1], [1.7274738E12, 0.08333333333333333], [1.7274741E12, 0.1], [1.72747374E12, 0.11666666666666667], [1.72747404E12, 0.11666666666666667], [1.72747272E12, 0.016666666666666666], [1.72747302E12, 0.06666666666666667], [1.72747332E12, 0.06666666666666667], [1.72747362E12, 0.13333333333333333], [1.72747392E12, 0.08333333333333333], [1.72747356E12, 0.05], [1.72747386E12, 0.016666666666666666], [1.72747254E12, 0.06666666666666667], [1.72747284E12, 0.05], [1.72747314E12, 0.05], [1.72747344E12, 0.06666666666666667]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketTimeoutException", "isController": false}, {"data": [[1.72747302E12, 0.1], [1.72747392E12, 0.16666666666666666]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.NoHttpResponseException", "isController": false}, {"data": [[1.72747278E12, 0.15], [1.72747308E12, 0.26666666666666666], [1.72747338E12, 0.1], [1.72747368E12, 0.05], [1.72747398E12, 0.11666666666666667], [1.72747266E12, 0.13333333333333333], [1.72747296E12, 0.11666666666666667], [1.7274726E12, 0.13333333333333333], [1.7274729E12, 0.13333333333333333], [1.7274732E12, 0.13333333333333333], [1.7274735E12, 0.11666666666666667], [1.7274738E12, 0.03333333333333333], [1.7274741E12, 0.08333333333333333], [1.72747248E12, 0.016666666666666666], [1.72747374E12, 0.11666666666666667], [1.72747404E12, 0.15], [1.72747272E12, 0.18333333333333332], [1.72747302E12, 0.08333333333333333], [1.72747332E12, 0.05], [1.72747362E12, 0.1], [1.72747392E12, 0.18333333333333332], [1.72747326E12, 0.05], [1.72747356E12, 0.15], [1.72747386E12, 0.13333333333333333], [1.72747416E12, 0.016666666666666666], [1.72747254E12, 0.11666666666666667], [1.72747284E12, 0.08333333333333333], [1.72747314E12, 0.05], [1.72747344E12, 0.1]], "isOverall": false, "label": "Non HTTP response code: org.apache.http.conn.ConnectTimeoutException", "isController": false}, {"data": [[1.72747428E12, 0.016666666666666666], [1.72747392E12, 0.016666666666666666]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72747428E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72747236E12, "maxY": 266.1, "series": [{"data": [[1.72747278E12, 260.7], [1.72747308E12, 255.81666666666666], [1.72747338E12, 258.03333333333336], [1.72747368E12, 263.1666666666667], [1.72747398E12, 263.8], [1.72747236E12, 56.68333333333333], [1.72747266E12, 254.56666666666666], [1.72747296E12, 260.68333333333334], [1.7274726E12, 258.55], [1.7274729E12, 255.46666666666667], [1.7274732E12, 255.6], [1.7274735E12, 264.06666666666666], [1.7274738E12, 266.0], [1.7274741E12, 259.98333333333335], [1.72747248E12, 255.73333333333332], [1.72747374E12, 262.23333333333335], [1.72747404E12, 265.0], [1.72747242E12, 183.46666666666667], [1.72747272E12, 262.1333333333333], [1.72747302E12, 261.05], [1.72747332E12, 258.78333333333336], [1.72747362E12, 256.96666666666664], [1.72747392E12, 262.21666666666664], [1.72747326E12, 263.76666666666665], [1.72747356E12, 261.31666666666666], [1.72747386E12, 258.1666666666667], [1.72747416E12, 27.75], [1.72747254E12, 260.05], [1.72747284E12, 255.7], [1.72747314E12, 254.83333333333334], [1.72747344E12, 266.1]], "isOverall": false, "label": "1.1 - POST - /confirmation.php-success", "isController": false}, {"data": [[1.72747278E12, 0.23333333333333334], [1.72747308E12, 0.5333333333333333], [1.72747338E12, 0.23333333333333334], [1.72747368E12, 0.11666666666666667], [1.72747398E12, 0.15], [1.72747428E12, 0.016666666666666666], [1.72747266E12, 0.16666666666666666], [1.72747296E12, 0.2], [1.7274726E12, 0.23333333333333334], [1.7274729E12, 0.2833333333333333], [1.7274732E12, 0.25], [1.7274735E12, 0.21666666666666667], [1.7274738E12, 0.15], [1.7274741E12, 0.21666666666666667], [1.72747248E12, 0.03333333333333333], [1.72747374E12, 0.2833333333333333], [1.72747404E12, 0.3], [1.72747272E12, 0.21666666666666667], [1.72747302E12, 0.26666666666666666], [1.72747332E12, 0.11666666666666667], [1.72747362E12, 0.23333333333333334], [1.72747392E12, 0.5], [1.72747326E12, 0.06666666666666667], [1.72747356E12, 0.21666666666666667], [1.72747386E12, 0.16666666666666666], [1.72747416E12, 0.06666666666666667], [1.72747254E12, 0.18333333333333332], [1.72747284E12, 0.13333333333333333], [1.72747314E12, 0.15], [1.72747344E12, 0.16666666666666666]], "isOverall": false, "label": "1.1 - POST - /confirmation.php-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72747428E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.016666666666666666, "minX": 1.72747236E12, "maxY": 266.1, "series": [{"data": [[1.72747278E12, 260.7], [1.72747308E12, 255.81666666666666], [1.72747338E12, 258.03333333333336], [1.72747368E12, 263.1666666666667], [1.72747398E12, 263.8], [1.72747236E12, 56.68333333333333], [1.72747266E12, 254.56666666666666], [1.72747296E12, 260.68333333333334], [1.7274726E12, 258.55], [1.7274729E12, 255.46666666666667], [1.7274732E12, 255.6], [1.7274735E12, 264.06666666666666], [1.7274738E12, 266.0], [1.7274741E12, 259.98333333333335], [1.72747248E12, 255.73333333333332], [1.72747374E12, 262.23333333333335], [1.72747404E12, 265.0], [1.72747242E12, 183.46666666666667], [1.72747272E12, 262.1333333333333], [1.72747302E12, 261.05], [1.72747332E12, 258.78333333333336], [1.72747362E12, 256.96666666666664], [1.72747392E12, 262.21666666666664], [1.72747326E12, 263.76666666666665], [1.72747356E12, 261.31666666666666], [1.72747386E12, 258.1666666666667], [1.72747416E12, 27.75], [1.72747254E12, 260.05], [1.72747284E12, 255.7], [1.72747314E12, 254.83333333333334], [1.72747344E12, 266.1]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72747278E12, 0.23333333333333334], [1.72747308E12, 0.5333333333333333], [1.72747338E12, 0.23333333333333334], [1.72747368E12, 0.11666666666666667], [1.72747398E12, 0.15], [1.72747428E12, 0.016666666666666666], [1.72747266E12, 0.16666666666666666], [1.72747296E12, 0.2], [1.7274726E12, 0.23333333333333334], [1.7274729E12, 0.2833333333333333], [1.7274732E12, 0.25], [1.7274735E12, 0.21666666666666667], [1.7274738E12, 0.15], [1.7274741E12, 0.21666666666666667], [1.72747248E12, 0.03333333333333333], [1.72747374E12, 0.2833333333333333], [1.72747404E12, 0.3], [1.72747272E12, 0.21666666666666667], [1.72747302E12, 0.26666666666666666], [1.72747332E12, 0.11666666666666667], [1.72747362E12, 0.23333333333333334], [1.72747392E12, 0.5], [1.72747326E12, 0.06666666666666667], [1.72747356E12, 0.21666666666666667], [1.72747386E12, 0.16666666666666666], [1.72747416E12, 0.06666666666666667], [1.72747254E12, 0.18333333333333332], [1.72747284E12, 0.13333333333333333], [1.72747314E12, 0.15], [1.72747344E12, 0.16666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72747428E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, -10800000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

